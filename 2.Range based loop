#include <iostream>
#include <vector>
#include <string>
#include <map>
using namespace std;

class MyVector
{
public:
    MyVector(int i) :size(i)
    {
        elems = new int[i];
        for(int j = 0;j < i; j++)
        {
            elems[j] = j;
        }
    }
    ~MyVector()
    {
        delete[] elems;
    }
    int& operator[](int index)
    {
        return elems[index];
    }
    int getSize()
    {
        return size;
    }
//    // you can solve the error-> begin
//    int * begin()
//    {
//        return elems;
//    }
//    int * end()
//    {
//        return elems + size;
//    }
//    // end
private:
    int* elems;
    int size;
};

//Non member function
int* begin(MyVector& v)
{
    //return &v[0];// not sure if its emtpy,[] is operator->  int& operator[](int index)
    return v.getSize() != 0 ? &v[0] : nullptr;
}
int* end(MyVector& v)
{
    //return &v[0];// not sure if its emtpy
    return v.getSize() != 0 ? &v[0]+ v.getSize() : nullptr;
}
int main()
{
    MyVector v(10);
    //  for(int i = 0; i < v.getSize();++i)
    //  {
    //      cout << v[i]<< endl;
    //  }
    for(const auto& x : v)// error needs being not declated in the scope
    {
        cout << x << endl;
    }

    // for non member fucntion in arrays, this works as compiler is taking non member function
    int arr[] = {11,22,33,44,55};
    for(const auto& y : arr)
    {
        cout << y << endl;
    }

    for(auto i = begin(arr); i != end(arr); ++i)
    {
        cout <<"same as above:"<< *i << endl;
    }
    return 0;
}
