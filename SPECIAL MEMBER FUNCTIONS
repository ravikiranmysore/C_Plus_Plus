//move semantics
//void FuncByValue(Foo others); // value semantics->copy
//void FuncByRef(Foo& others);  // reference sematics
struct Foo
{
    //default constructor
    Foo() = default;// if copy constructo,you need default constructor for sure

    //Move constructor
    Foo(int i) : i(new int(i))
    {}

    // copy constructor
    Foo(Foo const& other)
    {
        if(other.i != nullptr)
        {
            i = new int(*other.i);
        }
    }

    //assignment operator
    Foo& operator = (Foo const& other)
    {
        if(other.i != nullptr)
        {
            i = new int(*other.i);
        }
        return *this;
    }

    //move-assignment operator,(rvalue-just move not copy)
    Foo& operator = (Foo&& other)
    {
        if(other.i != nullptr)
        {
            i = other.i;
            other.i = nullptr; //stealing owner ship from assignement
        }
        return *this;
    }


    // 1st problem: since "new"-> clean up resources,So Destructor
    ~Foo()
    {
        if(i != nullptr)
        {
            delete i;
            i = nullptr;
        }
    }

    int *i = nullptr;
};

int ReturnPRvalue() { return 42;}

int main()
{
    /* Foo f1;
   f1.i = new int(42); //heap allocation->expensive

   Foo f2(f1);// same memory access, i.e it is trying to delete i, to dix it make a copy constructor
  */

    //--------PVALUE-----\\
    42; // pvalue
    int i = 42;// pvalue
    int i2 = ReturnPRvalue();// pvalue

    Foo f1;
    {
        // Foo f2;
        // f2.i = new int(42);
        // f1 = f2; // this is the assignment operator
        // f1 = move(f2); //eXpiring value(xvalue) - as it dies when out of {}
        f1 = Foo(42);//move constructor->before you needed,f2 and new int(2 lines)
                       // this is prvalue->pure rvalue
    }
}


/*
 rvalue ref:
  1 + 1 = 2
  lhs = 1 + 1
  rhs = 2

  lvalue-> left,rvalue->right - values
  int i = 42;
  42; //also complies fine.->but thats rvalue

  lvalues are permanent values or which has address.
  rvalues is temporary.
  2 types: prvalues->pure rvalue
           xvalue-> eXpiring value

move is a rvalue
move()->#include<utility>
thus
  f1 = move(f2);-->will steal the heap allocation of new int(42);
  */

/* SPECIAL MEMEBER FUNCTIONS
 * Foo() = default;
 * Foo(Foo const& other) = default;
 * Foo& operator = (Foo const& other) = default;
 * Foo(Foo&& other) = default;
 * Foo& operator=(Foo&& other) = default;
 * ~Foo() = default;
 * 
 * Even if i dont write it,complier will generate this 5 functions.
 * THIS IS RULE OF 3-> if you define 3 functions->moves will not be assgined by default.because its unsafe
 * if you define move constructor- its not safe to define copy constructor,
 * if virtual destructor->then you have define all 5-->
 *
 * RULE OF 5 -> ( 3 + move,move assginement)
 * 
 * 
 * 
 * RULE OF 0-> if none exists compiler generates all of them.
 * 
 * 
