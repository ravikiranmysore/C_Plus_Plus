// How to return an 2D array from function in c++
//1. Dynamic array
//2.Static
//3.Struct

#include<iostream>
#include<conio.h>
using namespace std;

//1.Dynamic array
//const int N = 3;

//void printArray(int** arr)
//{
//    for(int i= 0;i < N;++i)
//    {
//        for(int j = 0; j < N; ++j)
//        {
//            cout << arr[i][j];
//        }
//        cout << endl;
//    }
//}

//int** getArray()
//{
//  int** arr = new int*[N];
//  for(int i = 0;i < N; ++i)
//  {
//      arr[i] = new int[N];
//      for(int j = 0; j < N;++j)
//      {
//          arr[i][j] = i+j;
//      }
//  }
//  return arr;
//}

//int main()
//{
//  int **arr;
//  arr = getArray();
//  printArray(arr);
//  return 0;
//}

//2.static method
/*
const int N = 3;

void printArray(int arr[][N])
{
    for(int i = 0;i<N;++i)
    {
        for(int j = 0; j <N;++j)
        {
            cout<<arr[i][j];
        }
        cout << endl;
    }
}


//typedef int (*DoublePointer)[N];
//DoublePointer getArray()
int (*(getArray)())[N]
{
   static int arr[N][N] = { {0,1,2},{3,4,5},{6,7,8}};
   return arr;
}

int main()
{
  int (*arr)[N];
  arr = getArray();
  printArray(arr);
  return 0;
}
*/

// Struct method
const int N = 3;
struct ArrStruct
{
    int arr[N][N];
};

void printArray(ArrStruct var)
{
    for(int i = 0;i <N;++i)
    {
        for(int j =0; j <N;++j)
        {
            cout << var.arr[i][j];
        }
        cout << endl;
    }
}

ArrStruct getArray()
{
    ArrStruct var;
    for(int i = 0; i < N;++i)
    {
        for(int j = 0; j < N;++j)
        {
            var.arr[i][j] = i +j;
        }
    }
    return var;
}

int main()
{
    ArrStruct arr;
    arr = getArray();
    printArray(arr);
    return 0;
}

