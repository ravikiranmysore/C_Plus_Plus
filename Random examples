// ConsoleApplication1.cpp : This file contains the 'main' function. Program execution begins and ends there.
//
/*
#include <iostream>
using namespace std;

int main()
{
    cout << "Hello World!\n";
	int reverse = 0;
	int input;
	cin >> input;

	while (input != 0)
	{
		reverse = reverse * 10 + input % 10;
		input /= 10;
	}
	cout << reverse;
	return 0;
	
}

#include "iostream"
#include <memory>
#include <vector>

using namespace std;

class Base {
public:
	virtual void say_hello() const {
		std::cout << "Hello Base" << std::endl;
	}
};

class Derived : public Base
{
public:
	void say_hello() const {
		std::cout << "Hello Derived" << std::endl;
	}
};

void greetings(const Base& obj)
{
	std::cout << "Greetings ";
	obj.say_hello();
}

int main()
{
	Base* ptr = new Base();
	Derived* dPtr = new Derived();


	Base *arr[] = { ptr,dPtr };
	for (auto i = 0; i < 2; ++i)
		arr[i]->say_hello();

	std::vector<Base*> account{ ptr,dPtr };
	for (auto acc_tr : account)
		acc_tr->say_hello();

	std::unique_ptr<Base> v3 = std::make_unique<Derived>();
	std::cout << "this is unique" << std::endl;
	v3->say_hello();

	delete ptr;
	delete dPtr;

	return 0;
}


#include "iostream"

using namespace std;

#define MAX(a,b) ((a>b) ? a : b)

template<typename T1>
void swap_me(T1 &a1, T1 &b1)
{
	T1 temp = a1;
	a1 = b1;
	b1 = temp;
}

template<typename T>
T min(T a, T b) {
	return (a < b) ? a : b;
}

struct Person {
	std::string name;
	int age;
	//add compare function for p3, because class object comparison
	bool operator<(const Person& rhs) const {
		return this->age < rhs.age;
	}
};

template<typename T1, typename T2>
void func(T1 a, T2 b) {
	cout << a << " " << b << endl;
}

// since Person has to be overloaded
std::ostream& operator<<(std::ostream& os, const Person& p) {
	os << p.name;
	return os;
}



#define SQUARE(a) ((a)*(a)) // Best practice

int main()
{
	/* Containers :
     collection of objects or primitive types(array, vector, deque, stack, set,map, etc)
	 sequence containers : array, vectors, list, forward_list, deque
	 associated containers : set, multi set, map, multi map
	 container adapters : stack, queue, priority queue
    
	Algorithms :
	functions are processiong sequences of elements from containers
	(find, max, count, accumulate, sort etc)

	Iterators :
	Generate squences of elements from containers
	(forward, reverse, by value, by reference, constant etc)
	input iterator , output iterator, forward iterator, bidirectional iterator, random access iterator.

	there are about 60 algo :
	Non-modifying, Modifying.
	*/
/*
	cout << MAX(11, 2) << endl;
	int result = SQUARE(5);
	result = 5 * 5;
	result = 100 / SQUARE(5);
	result = 100 / 5 * 5;
	cout << result;

	cout << "-----" << endl;

	int n = 11;
	int m = 9;
	cout << min(n, m) << endl;

	cout << "-----" << endl;

	Person p1{ "ABC", 15 };
	Person p2{ "DEF", 30 };

	Person p3 = min(p1, p2);
	cout << p3.name << " is younger " << endl;

	cout << "-----" << endl;

	func(p1, p2); // this wont work, a is Person, there is no overload.

	func<int, int>(10, 20);
	func(2000, std::string("frank"));

	cout << "-----" << endl;
	int x = 100;
	int y = 200;

	cout << "Before : " << x << " , " << y << endl;
	swap_me(x, y);
	cout << "After : " << x << " , " << y << endl;


	return 0;
}



#include<iostream>
#include<string>
#include<vector>

using namespace std;

template<typename T>
class Item {
private:
	std::string name;
	T value;
public :
	Item(std::string name, T value) : name{name}, value{value}
	{}
	std::string get_name() const {
		return name;
	}
	T get_value() const
	{
		return value;
	}
};

template<typename T1, typename T2>
struct My_Pair {
	T1 first;
	T2 second;
};

int main()
{
	Item<int> item1{ "abc",100 };
	cout << item1.get_name() << " " << item1.get_value() << endl;

	Item<std::string> item2{ "duc","also string" };
	cout << item2.get_name() << " " << item2.get_value() << endl;

	Item< Item<std::string> > item3{ "thisis",{"totally","different" } };
	cout << item3.get_name() << " "
		<< item3.get_value().get_name() << " "
		<< item3.get_value().get_value() << endl;

	cout << "******************" << endl;

	std::vector<Item<double>> vec{};
	vec.push_back(Item<double>("One", 100.0));
	vec.push_back(Item<double>("Two", 200.0));
	vec.push_back(Item<double>("ThREE", 300.0));

	for (const auto& itemy : vec) {
	 cout << itemy.get_name() << " " << itemy.get_value() << endl;
	}

	cout << "******************" << endl;

	My_Pair <std::string, int> p1{ "frank",100 };
	My_Pair <int,double> p2{ 25,12.6 };

	cout << p1.first << " " << p1.second << endl;
	cout << p2.first << " " << p2.second << endl;

	return 0;
}



// C++11 the STL has std:::array which is a template based array class
// use std::array instead of raw arrays whenever possible
// Note that we can have non type template parameters
// thats what N is in this case

#include<iostream>
#include<string>

using namespace std;

template<int N>
class Array {
	int size{N};   // how do we get the N;
	int values[N]; // the N needs to be known at compile time.

	friend ostream& operator<<(ostream& os, const Array<N>& arr)
	{
		os << "[ ";
		for (const auto& val : arr.values)
			os << val << " ";
		os << "]" << endl;
		return os;
	}
public:
	Array() = default;
	Array(int init_val) {
		for (auto& item : values)
			item = init_val;
	}
	void fill(int val) {
		for (auto& item : values)
			item = val;
	}
	int get_size() const {
		return size;
	}

	//overloaded subscript operator for easy use
	int& operator[](int index) {
		return values[index];
	}
};

int main()
{
	Array<5> nums;
	cout << "size of nums  is : " << nums.get_size() << endl;
	cout << nums << endl;

	nums.fill(0);
	cout << "size of nums is : " << nums.get_size() << endl;
	cout << nums << endl;

	nums.fill(10);
	cout << nums << endl;

	nums[0] = 1000; // subscript
	nums[3] = 2000;
	cout << nums << endl;

	Array<100> nums2{ 1 };
	cout << "the size of num2 is : " << nums2.get_size() << endl;
	cout << nums2 << endl;
	return  0;
}


#include<iostream>
#include<string>

using namespace std;

template<typename T,int N>
class Array {
	int size{ N };   // how do we get the N;
	T values[N]; // the N needs to be known at compile time.

	friend ostream& operator<<(ostream& os, const Array<T,N>& arr)
	{
		os << "[ ";
		for (const auto& val : arr.values)
			os << val << " ";
		os << "]" << endl;
		return os;
	}
public:
	Array() = default;
	Array(T init_val) {
		for (auto& item : values)
			item = init_val;
	}
	void fill(T val) {
		for (auto& item : values)
			item = val;
	}
	int get_size() const {
		return size;
	}

	//overloaded subscript operator for easy use
	T& operator[](int index) {
		return values[index];
	}
};

int main()
{
	Array<int, 5> nums;
	cout << "size of nums  is : " << nums.get_size() << endl;
	cout << nums << endl;

	nums.fill(0);
	cout << "size of nums is : " << nums.get_size() << endl;
	cout << nums << endl;

	nums.fill(10);
	cout << nums << endl;

	nums[0] = 1000; // subscript
	nums[3] = 2000;
	cout << nums << endl;

	Array<int, 100> nums2{ 1 };
	cout << "the size of num2 is : " << nums2.get_size() << endl;
	cout << nums2 << endl;

	Array<std::string, 20> stri(string{ "Ravi" });
	cout << "the size of stri is : " << stri.get_size() << endl;
	cout << stri << endl;

	stri[1] = string("Kiran");
	cout << stri << endl;

	stri.fill(string("18"));
	cout << stri << endl;

	return  0;
}

#include <iostream>
#include<vector>
#include<map>
#include<set>
#include <algorithm>
#include <cctype>

using namespace std;

class Person {
	string name;
	int age;
public:
	Person() = default;
	Person(string name, int age)
		: name{ name }, age{ age }
	{}
	bool operator<(const Person& rhs) const
	{
		return this->age < rhs.age;
	}
	bool operator==(const Person& rhs) const { 
		return (this->name == rhs.name && this->age == rhs.age);
	} 
};

void find_test()
{
	cout << "***********" << endl;
	vector<int> vec{ 1,2,3,4,5 };
	auto loc = std::find(std::begin(vec), std::end(vec), 1);

	if (loc != std::end(vec))
		cout << "Found the number" << *loc << endl;
	else
		cout << "Couldnt find the number"  << endl;
}
int main()
{
	find_test();
	 
	return 0;

}

//Array decay :
#include<iostream>
using namespace std;

void DisplayValue(int* p) {
	cout << "New size of array by passing the value : ";
	cout << sizeof(p) << endl;
}
void DisplayPointer(int(*p)[10]) {
	cout << "New size of array by passing the pointer : ";
	cout << sizeof(p) << endl;
}
int main() {
	int arr[10] = { 1, 2, };
	cout << "Actual size of array is : " << sizeof(arr) << "\t i.e ," << sizeof(arr) << "*" << sizeof(int) << endl;
	DisplayValue(arr);
	DisplayPointer(&arr);
	return 0;
}
// fix :
#include<iostream>
using namespace std;
void Display(int(&p)[10]) {
	cout << "New size of array by passing reference: ";
	cout << sizeof(p) << endl;
}
int main() {
	int arr[10];
	cout << "Actual size of array is: ";
	cout << sizeof(arr) << endl;
	Display(arr);
	return 0;
}

/* 
STL intro :
1.Container, Iterator, Algorithms

1.to store data you have container : list, array etc
2. once you have stored, you need pointer to access it, you can move forward/backward
	ARRAY : Random access iterator, we use index to access perticular location/index, can jump
3. Algorithm : General algorithms like sorting, searching, reversing etc.

TOPIC : std:: array

Syntax : std::array<T,N> array ;

NOTE:
1. std::array is a container that encapsulate fixed size array.
2. arraysize is needed at compile time.
3. assign by value is actually by value
4.access Elements :
  1.at() : boundsafe, []: no boundsafe expection, front(), back(), data() 



#include<iostream>
#include<array>
using namespace std;
using namespace std;

int main()
{
	std::array<int, 5> myarray;

	std::array<int, 5> myarray = { 1,2,3,4,5 };
	std::array<int, 5> myarray2 { 1,2,3,4,5 }; // uniform initilization

	std::array<int, 5> myarray3; // int a[5] = {1,2...} can be now rewritten as int a[5]; a = {1,2,3...} 
	myarray3 = { 7,8,9,10,11 };
}


// vector is Dynamic Array or Array list.
// sequence container, one after other.

//fast access + dynamic allocation = VECTOR


#include <iostream>
#include <memory>
using namespace std;

int main() {

	std::cout << std::boolalpha << std::endl;

	auto sharedPtr = std::make_shared<int>(2011);
	std::weak_ptr<int> weakPtr(sharedPtr);

	std::cout << "weakPtr.use_count(): " << weakPtr.use_count() << std::endl;
	std::cout << "sharedPtr.use_count(): " << sharedPtr.use_count() << std::endl;
	std::cout << "weakPtr.expired(): " << weakPtr.expired() << std::endl;//checks if the resource was already deleted. 
														//  weakPtr.use_count() == 0.

	if (std::shared_ptr<int> sharedPtr1 = weakPtr.lock()) { // check if its expired, if not return *this
		std::cout << "*sharedPtr: " << *sharedPtr << std::endl;
		std::cout << "sharedPtr1.use_count(): " << sharedPtr1.use_count() << std::endl;
		std::cout << "sharedPtr.use_count(): " << sharedPtr.use_count() << std::endl;
	}
	else {
		std::cout << "Don't get the resource!" << std::endl;
	}

	weakPtr.reset(); // weakPtr.lock() fails.
	if (std::shared_ptr<int> sharedPtr1 = weakPtr.lock()) {
		std::cout << "*sharedPtr: " << *sharedPtr << std::endl;
		std::cout << "sharedPtr1.use_count(): " << sharedPtr1.use_count() << std::endl;
	}
	else {
		std::cout << "Don't get the resource!" << std::endl;
	}

	cout << "\n\n\n\n" << endl;
	std::cout << "weakPtr.use_count(): " << weakPtr.use_count() << std::endl;
	std::cout << "sharedPtr.use_count(): " << sharedPtr.use_count() << std::endl;
	std::cout << "weakPtr.expired(): " << weakPtr.expired() << std::endl;

	std::cout << std::endl;

}

// cycle.cpp

#include <iostream>
#include <memory>

struct Son;
struct Daughter;

struct Mother {
	~Mother() {
		std::cout << "Mother gone" << std::endl;
	}
	void setSon(const std::shared_ptr<Son> s) {
		mySon = s;
	}
	void setDaughter(const std::shared_ptr<Daughter> d) {
		myDaughter = d;
	}
	std::shared_ptr<const Son> mySon;
	std::weak_ptr<const Daughter> myDaughter;
};

struct Son {
	Son(std::shared_ptr<Mother> m) :myMother(m) {}
	~Son() {
		std::cout << "Son gone" << std::endl;
	}
	std::shared_ptr<const Mother> myMother;
};

struct Daughter {
	Daughter(std::shared_ptr<Mother> m) :myMother(m) {}
	~Daughter() {
		std::cout << "Daughter gone" << std::endl;
	}
	std::shared_ptr<const Mother> myMother;
};

int main() {
	std::cout << std::endl;
	{
		std::shared_ptr<Mother> mother = std::shared_ptr<Mother>(new Mother);
		std::shared_ptr<Son> son = std::shared_ptr<Son>(new Son(mother));
		std::shared_ptr<Daughter> daughter = std::shared_ptr<Daughter>(new Daughter(mother));
		mother->setSon(son);
		mother->setDaughter(daughter);
	}
	std::cout << std::endl;
}

// weak pointer doesnt own, and it doesnt participate on ref count(countrol block)...A->sp1,sp2,wp1 --> then RefCount = 2 only(no weak counted)
//weak_ptr is created as a copy of shared_ptr.
//first check its validity "expired()", then "lock()" -> returns void or shared pointer.

// Cyclic reference problem : sp1 -> sp2 and sp2 -> sp1, cyclic problem, thus using weak pointer,it will break one reference, cyclic sharing is broken.

#include <iostream>
#include <memory>

using namespace std;

struct A {
	std::weak_ptr<A> adjacent; // std::shared_ptr<A> adjacent; // here breaking cyclic ref
	A() {
		cout << "A Constructor" << endl;
	}
	~A() {
		cout << "A Destructor" << endl;
	}
	void printA() {
		cout << "A struct function " << endl;
	}
	void set_adj(std::shared_ptr<A> ptr) {
		adjacent = ptr;
	}
};
int main()
{
	std::shared_ptr<A> sp1(new A); // if used weak pointer, it only shows the number of use_counts
	std::shared_ptr<A> sp2(new A);

	// weak_ptr
	std::weak_ptr<A> wp1 = sp1;
	// std::shared_ptr<A> wp1 = sp1; // here count will be 3
	
	// cant use wp1->print, must use lock
	wp1.lock()->printA();

	sp1->set_adj(sp2);
	sp2->set_adj(sp1); // cyclic dependency, always shared between each other

	cout << sp1.use_count() << endl;
	cout << sp2.use_count() << endl; // ref point has both 2. weak pointer shouldnt increase ref count

	// if you see output constructor are called twice, and NO destructor due to cyclic dependency,
	// for that you need to change the shared pointer(adjacent) to weak pointer-> then destructor is called.
	return 0;
}

// "Vector = Linked list(dynamic grow) + Array ( 0(1) ) access time is faster" ;

// Set is an associative container that contains sorted set of unique objects of type key.
// Red-Black Tree.
//Insertion, Removal, Search having logirathmic complexity.

#include<iostream>
#include<vector>
using namespace std;

int main()
{
	std::vector<vector<int>> Tree;
	int edge, n1, n2;

	cout << "Enter the number of edges you wish : " << endl;
	cin >> edge;
	Tree.resize(edge);

	for (int i = 0; i < edge; ++i)
	{
		cin >> n1 >> n2;
		Tree[n1].push_back(n2);
	}

	for (const auto& e1: Tree) {
		for (const auto& e2 : e1) {
			cout << e2;
		}
		cout << endl;
	}
	return 0;
}

// C program for different tree traversals 
#include <iostream> 
using namespace std;

// A binary tree node has data, pointer to left child
and a pointer to right child 

struct Node
{
	int data;
	struct Node* left, * right;
	Node(int data)
	{
		this->data = data;
		left = right = NULL;
	}
};

// Given a binary tree, print its nodes according to the
//"bottom-up" postorder traversal.
void printPostorder(struct Node* node)
{
	if (node == NULL)
		return;

	// first recur on left subtree 
	printPostorder(node->left);

	// then recur on right subtree 
	printPostorder(node->right);

	// now deal with the node 
	cout << node->data << " ";
}

//Given a binary tree, print its nodes in inorder
void printInorder(struct Node* node)
{
	if (node == NULL)
		return;

	// first recur on left child 
	printInorder(node->left);

	// then print the data of node /
	cout << node->data << " ";

	//* now recur on right child
	printInorder(node->right);
}

// Given a binary tree, print its nodes in preorder
void printPreorder(struct Node* node)
{
	if (node == NULL)
		return;

	// first print data of node 
	cout << node->data << " ";

	// then recur on left sutree 
	printPreorder(node->left);

	// now recur on right subtree 
	printPreorder(node->right);
}

// Driver program to test above functions 
int main()
{
	struct Node* root = new Node(1);
	root->left = new Node(2);
	root->right = new Node(3);
	root->left->left = new Node(4);
	root->left->right = new Node(5);

	cout << "\nPreorder traversal of binary tree is \n";
	printPreorder(root);

	cout << "\nInorder traversal of binary tree is \n";
	printInorder(root);

	cout << "\nPostorder traversal of binary tree is \n";
	printPostorder(root);

	return 0;
} 

// Set ; if you wnat to store user defined data type in set then we will have to provide compare function
// so that set can store them in sorted order.

*/

/*
Data structure : Its an art of storing the data(structuring data) ex: linked list, array.
Types: Primitive : int, float, bool etc
      Non primitive : Linear : array, stack, queue --> sequence
					 Non-Linear : Tree(its not cycle), Graph(Cyclic).

Linked List : 
+ Implementation of stacks and queues,
+ Graph and tree uses adjacency list represntation which uses linked list to store adjacent vertices.
+ Dynamic memory allocation(OS uses linked list to keep the track)
+ OS uses linked list to loop through all process.
+ Next and Prev functionality cna be implemented using linked list.


#include<iostream>
#include<forward_list>
#include<list>
using namespace std;

struct LinkedList
{
	int data;
	LinkedList* next;
};

void printLinkedList(LinkedList* root)
{
	while (root)
	{
		cout << " data: " << root->data;
		root = root->next;
	}
}
int main()
{
	LinkedList *root, * second, * third;

	root = new LinkedList;
	second = new LinkedList;
	third = new LinkedList;

	root->data = 10;
	root->next = second;

	second->data = 20;
	second->next = third;

	third->data = 30;
	third->next = NULL;

	printLinkedList(root);

	cout << "\n\n\n" << endl; // forward list is same as Linked List without NODE
	forward_list<int> l1 = { 5,4,6,2 };
	forward_list<int> l2 = { 7,6,1,9};
	list<int> l3 = { 5,4,6,2 };
	list<int> l4 = { 7,6,1,9 };

	l1.sort();
	//l2.reverse();// merge works only if sorted
	l2.sort();

	for (auto& elm : l1)
		cout << elm << endl;

	cout << "\n\n\n" << endl;
	for (auto& elm1 : l2)
		cout << elm1 << endl;

	l1.merge(l2);
	cout << "\n\n\n" << endl;
	for (auto& elm2 : l1)
		cout << elm2 << endl;
	cout << "\n\n\n" << endl;
	for (auto& elm3 : l3)
		cout << elm3 << endl;

	return 0;

	// forward_list -> singly linked list.
	// List is -> doubly linked list.
}

#include<iostream> 
#include<set> 
using namespace std;
class A {
public:
	int x;
	A(int x = 11) : x{ x } { cout << "A Constructor" << endl; }
	A(const A& rhs) { x = rhs.x; cout << "A Copy constuctor " << endl; }
};

bool operator < (const A& lhs, const A& rhs) { return lhs.x < rhs.x; }

int main()
{
	set<A> Set;
	A c;
	cout << "Constructor - c.x : "<< c.x << endl;
	A b(40);
	cout << "Copy constuctor b.x :" << b.x << endl;
	Set.insert(b);
	cout << "Avoding unnecessary copy : " << endl;
	Set.emplace(b);
	cout << "\nTHE END" << endl;
	Set.emplace(10);
	return 0;
}



#include<iostream>
#include<deque>
#include<vector>
#include<iterator>
#include<algorithm>

using namespace std;

template<typename T >
void display(const std::deque<T>& d)
{
	cout << "[";
	for (const auto& elme : d)
		cout << elme << " ";
	cout << "]" << endl;
}

void test1()
{
	cout << "Test =====" << endl;

	std::deque<int> d{ 1,2,3,4,5 };
	display(d);
	d = { 2,4,5,6 };
	display(d);

	std::deque<int> d1(10,100);
	display(d1);

	d[0] = 100;
	d.at(1) = 200;
	display(d);
}

void test2()
{
	cout << "Test2 =====" << endl;

	std::deque<int> d{ 0,0,0 };
	display(d);

	d.push_back(10);
	d.push_back(20);
	display(d);

	d.push_front(100);
	d.push_front(200);
	display(d);

	cout << "Front : " << d.front() << endl;
	cout << "Back : " << d.back() << endl;
	cout << "Size : " << d.size() << endl;

	d.pop_back();
	d.pop_front();
	display(d);
}

void test5() {
	cout << "Test5 ===== " << endl;
	vector<int> vec{ 1,2,3,4,5,6,7,8,9,10 };
	deque<int> d;

	copy(vec.begin(), vec.end(), std::front_inserter(d));
	display(d);
	// [10 9 8 7 6 5 4 3 2 1 ]
	d.clear();

	copy(vec.begin(), vec.end(), std::back_inserter(d));
	display(d);
	// [1 2 3 4 5 6 7 8 9 10 ]
}

int main()
{
	std::deque<int> d{ 11,22,33,44,55 };
	display(d);
	 
	test1();
	test2();
	test5();

	return 0;
}

#include<iostream>
#include<list> 
#include<algorithm>
#include <string>
#include<iterator> // std::advance --> + from the element pointed to.

using namespace std;

class Person {
	friend std::ostream& operator<<(std::ostream& os, const Person& p);
	std::string name;
	int age;
public:
	Person() : name{"Unknown"}, age{0} {}
	Person(std::string name, int age) : name{ name }, age{ age } {}
	bool operator < (const Person& rhs) const {
		return this->age < rhs.age;
	}
	bool operator==(const Person& rhs) const { 
		return(this->name == rhs.name, this->age == rhs.age);
	}
};

std::ostream& operator<<(std::ostream& os, const Person& p) {
	os << p.name << ":" << p.age;
	return os;
}

template<typename T >
void display(const std::list<T>& d)
{
	cout << "[";
	for (const auto& elme : d)
		cout << elme << " ";
	cout << "]" << endl;
}

void test1()
{
	cout << "Test ===== \n" << endl;

	std::list<int> l1{ 1,2,3,4,5 };
	display(l1);

	std::list<std::string> l2;
	l2.push_back("back");
	l2.push_front("front");
	display(l2);

	std::list<int> l3;
	l3 = { 1,2,3,4,5,6,7,8,9,10 };
	display(l3);
	cout << "Size : " << l3.size() << endl;
	cout << "Front : " << l3.front() << endl;
	cout << "Back : " << l3.back() << endl;
	l3.resize(5);
	display(l3);
	l3.resize(10);
	display(l3);

	std::list<Person> person;
	person.resize(5);
	display(person);

	std::list<int> l4(10, 100);

	display(l4);
	l4.clear();
	display(l4);
	cout << "Size : " << l4.size() << endl;

	auto it = std::find(l3.begin(), l3.end(), 5);
	if (it != l3.end())
		l3.insert(it, 100);

	display(l3);

	std::advance(it, -1); // from pointing to "5" in the list, advance from there
	cout << *it << endl;
	display(l3);

	l3.erase(it);
	cout << "After removing 100 from the list " << endl;
	display(l3);

}

// emplace_back and emplace
void test2()
{
	cout << "Test 5 ---- " << endl;
	std::list<Person> stooges{
		{"larry", 18},
		{ "Moe", 25},
		{"Curely", 17}
	};

	display(stooges);
	std::string name;
	int age{};
	cout << "Enter the name of the next stooges" << endl;
	getline(std::cin, name);
	cout << "Enter their age" << endl;
	std::cin >> age;

	stooges.emplace_back(name, age); // adding to last
	display(stooges);

	// insert franm before moe
	auto it = std::find(stooges.begin(), stooges.end(), Person{ "Curely", 17 }); // person uses equality operator
	if (it != stooges.end())
		stooges.emplace(it, "emplace", 18); // this adds after the equality check

	display(stooges);
 
}

int main()
{
	test1();
	test2();
	return 0;
}

#include<iostream>
#include<list>
#include<string>
#include<cctype>
#include<iomanip>
#include<limits>

using namespace std;
class Song {
	friend std::ostream& operator<<(std::ostream& os, const Song& s);
	std::string name;
	std::string artist;
	int rating;
public:
	Song() = default;
	Song(std::string name, std::string artist, int rating)
		: name{ name }, artist{ artist }, rating{ rating } {}
	std::string get_name() const {
		return name;
	}

	std::string get_artist() const {
		return artist;
	}
	int get_ratin() const {
		return rating;
	}

	bool operator<(const Song& rhs) const {
		return this->name < rhs.name;
	}
	bool operator==(const Song& rhs) const {
		return this->name < rhs.name;
	}
};

std::ostream& operator<<(std::ostream& os, const Song& s) {
	os << std::setw(20) << std::left << s.name
		<< std::setw(30) << std::left << s.artist
		<< std::setw(2) << std::left << s.rating;
	return os;
}

void display_menu() {
	cout << "\nF - Play first song" << endl;
	cout << "\nN - Play next song" << endl;
	cout << "\nP - Play Prev song" << endl;
	cout << "\nA - Add and play a new song at current location" << endl;
	cout << "\nL - List the current playlist" << endl;
	cout << "==============================" << endl;
	cout << "Enter a selection (Q for quit)" << endl;
}

void play_current_song(const Song& song)
{
	cout << "\n{"<< "PLAYING : " << song << "}"<< endl;
}

void display_playlist(const std::list<Song>& playlist, const Song& current_song)
{
	for (const Song& song : playlist) {
		cout << song << endl;
	}
	cout << "\nCurrent Song : " << endl;
	cout << "======================================================" << endl;
	cout << current_song << endl;
	cout << "======================================================" << endl;
}

int main()
{
	std::list<Song> playlist{
		{"God's Plan", "Drake", 5},
		{"Never be the same ", "Camila Cabello", 5},
		{"Pray for me", "The weekend and J.lamar", 4},
		{"The Middle", "Zedd, Maren Morris & Grey", 5},
		{"wait", "Maroone 5 ", 4},
		{"whatever it takes", "Imagine Dragons", 3},
	};

	std::list<Song>::iterator current_song = playlist.begin();
	display_playlist(playlist, *current_song);

	char selection{};
	do {
		display_menu();
		cin >> selection;
		selection = std::toupper(selection);
		if (selection == 'F')
		{
			cout << "Playing first song" << endl;
			current_song = playlist.begin();
			play_current_song(*current_song);
		}
		else if (selection == 'N')
		{
			cout << "Playing next song" << endl;
			current_song++;
			if (current_song == playlist.end())
			{
				cout << "Wrapping to start of playlist" << endl;
				current_song = playlist.begin();
			}
			play_current_song(*current_song);
		}
		else if (selection == 'P') {
			cout << "Playing prev. song" << endl;
			if (current_song == playlist.begin())
			{
				cout << "Wrapping to end of playlist" << endl;
				current_song = playlist.end();
			}
			current_song--;
			play_current_song(*current_song);
		}
		else if (selection == 'A') {
			std::string name, artist;
			int rating;
			cin.clear();
			cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
			cout << "Adding and playing new song" << endl;
			cout << "Enter song name : ";
			getline(cin, name);
			cout << "Enter song artist : ";
			getline(cin, artist);
			cout << "Enter your rating(1-5) : ";
			cin >> rating;
			playlist.insert(current_song, Song{ name, artist, rating });
			current_song--;
			play_current_song(*current_song);
		}
		else if (selection == 'L') {
			cout << endl;
			display_playlist(playlist, *current_song);
		}
		else if (selection == 'Q')
			cout << "Quitting" << endl;
		else
			cout << "illegal choice, Try again";
	} while (selection != 'Q');

	cout << "Thanks for listening" << endl;
	return 0;
}


#include<iostream>
#include<map>
#include<set>
#include<stack>

using namespace std;

void display(const std::map<std::string, std::set<int>>& m)
{
	cout << "[";
	for (const auto& elme : m){
		cout << elme.first << " : [";
			for (const auto& set_elem : elme.second)
				cout << set_elem << " ";
			cout << "] ";
	}
	cout << "] " << endl;
}

template<typename T1, typename T2>
void display(const map<T1, T2>& l) {
	cout << "[ ";
	for (const auto& elem : l) {
		cout << elem.first << ":" << elem.second << " ";
	}
	cout << "] " << endl;
}

void test1()
{
	cout << "Test1 ===============" << endl;
	map<std::string, int> m
	{
		{"arry", 3},
		{"Moe",1},
		{"urley",2}
	};
	display(m);

	m.insert(std::pair < std::string, int> ("Zanna", 10));
	display(m);

	m.insert(std::make_pair("Joe", 5));
	display(m);

	m["Frank"] = 18;
	display(m);

	m["Frank"] += 10;
	display(m);

	m.erase("Frank");
	display(m);
	cout << "Count for Joe : " << m.count("Joe") << endl;
	cout << "Count for Frank : " << m.count("Frank") << endl;
	auto it = m.find("Larry");
	if (it != m.end())
		cout << "Found" << it->first << " : " << it->second << endl;

	m.clear();

	display(m);

}

int main()
{
	test1();

	stack<int> s;
	for (int i : {1, 2, 3, 4, 115})
		s.push(i);
	cout << s.top() << endl;
	s.top() = 45;
	cout << s.top() << endl;


	return 0;
}


/*
#include<iostream>
#include<algorithm>
using namespace std;

bool compare(int a, int b)
{
	return a < b;
}

void bubblesort(int a[], int n)
{
	int flag;
	for (int i = 0; i < n-1; i++) // first index to last index
	{
		flag = 0;
		cout << "Pass : " << i + 1<<endl;
		for (int j = 0; j < (n-i-1); j++) // inside loop, 0 to no.of iterations, i = iternation, leaving last element
		{
			if (a[j] > a[j + 1])
			{
				swap(a[j], a[j + 1]);
				flag = 1;
			}		
		}
		if (flag == 0)
			break;
	}
}

int main()
{
	int n;
	cin >> n;
	int a[1000];

	for (int i = 0; i < n; i++)
	{
		cin>> a[i];
	}

	//sort(a, a + n);
	//sort(a, a + n, compare);
	bubblesort(a, n);

	for (int i = 0; i < n; i++)
	{
		cout << a[i] << " ";
	}
	return 0;
}
			
*/
