//virtual destructor-> to avoid Memory leak and to delete the objects correctly in order

#include <iostream>
using namespace std;

class Base
{
public:
  virtual void fun() {
        cout << "Base fun"<< endl;
    }
    Base()
    {
        cout << "Base Constructor"<< endl;
    }
    virtual ~Base()
    {
         cout << "Base Destructor"<< endl;
    }
};

class Derived : public Base
{
public:
  virtual void fun() {
        cout << " Derived fun"<< endl;
    }
    Derived()
    {
        cout << " Derived Constructor"<< endl;
    }
   virtual ~Derived()
    {
         cout << " Derived Destructor"<< endl;
    }
};
int main()
{
  Base *b1 = new Base();
  Base *b2 = new Derived();
  b1->fun();
  b2->fun();

  delete b1;
  delete b2;
  return 0;
}
