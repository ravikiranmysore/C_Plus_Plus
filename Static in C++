/*Static data members:
 * Its common for all the objects
 * its not part of the object,but its the attribute of the class.
*/
#include <iostream>
using namespace std;

class Base
{
public:
    int x;
    static int y;//this is only declartion

    void printX() { cout << x << y << " : x"<< " : y " <<endl;} // it can use both static and nonstatic
    static void printY() { cout << y << ": y"<<endl;} // cant use which is not static
};

int Base::y; // this is allocating space for member,initizilation

int main()
{
   Base b1;
   b1.x = 10;

   Base b2;
   b2.x = 20; // in these data members are added for each class objects(b1,b2 etc)

   b1.y = 30;
   b2.y = 50;

   cout << b1.y << endl;
   cout << b2.y << endl; // here both will be 50 as its is common for both

   b1.printX();
   b2.printY(); // this is static method,as y has single memory,it will hold the last assigned
   Base::printY(); // can also be written so
   return 0;
}


#include <iostream>
using namespace std;

class Base {
public :
    static void staticFun() {
        cout << "Base static " << endl;
        //simpleFun(); //--> error as you cant call nonstatic function
    }
   //--> static void simpleFun() {
    void simpleFun() {
        cout << "Simple Fun"<< endl;
    }
};

Base b;
Base& eval() { cout << "eval"<< endl; return b; }
int main()
{
    Base b;
    b.simpleFun();
    b.staticFun();
    Base::staticFun();
    eval().simpleFun();// run time compliation,as eval get output first
    eval().staticFun();
    return 0;
}

