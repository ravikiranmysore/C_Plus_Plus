#include <iostream>
using namespace std;

class Base
{
public:
    Base() {cout << "Base()"<< endl;}
    Base(int x) {cout << "Base(int x)"<< endl; }
    ~Base() { cout << "~Base()"<< endl;}
};
class Child : public Base {
public:
    Child(): Base() { cout << "Child()"<<endl;}
    Child(int x): Base() { cout << "Child(int x)"<<endl;}

};

int main()
{
    Base b1 = Base();
    Base b2 = Base(1);
    /* the scope of Base(tempory object) is only to b1(their line)
     * thus output will be
     * Base(),
     * Base(int x),
     * ~Base(),
     * ~Base()
     *
     * if only
     * Base(); -> is called then
     * Base(),~Base()
     * Base(int x),~Base() will be output.
     * Because the scope is from { to }
     */

    Child();
    Child(1);

    return 0;
}
