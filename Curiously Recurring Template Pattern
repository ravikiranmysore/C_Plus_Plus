/*
#include<iostream>
#include<vector>
#pragma optimize("", off)

using namespace std;

struct Shape
{
    template<typename T>
    //virtual Shape* Clone() = 0;// Pure abstract
    T* Clone() { return new T(*this); }

    virtual ~Shape() = default;
};

struct Square : public Shape
{
    int x = 1; //one dimension
    // in order to Clone shapes
//    virtual Square* Clone() override // by adding virtual,override->can call from base pointer
//    {
//        return new Square(*this); // on heap->dynamic
//    }
};

struct Rectangle : public Shape
{
    // Same function only Parameter is changed->Paramnetric Change- square
//    virtual Rectangle* Clone() override
//    {
//        return new Rectangle(*this); // on heap->dynamic
//    }
    int x = 1; //two dimension
    int y = 2;
};

int main()
{
    vector<Shape*> v;
    v.push_back(new Square);
    v.push_back(new Rectangle);
    for(auto s : v)
    {
        Shape* c = s->Clone<Shape>();
        // we are loosing information--> no int x
        cout << c << endl;
    }
    return 0;
}
*/

// Curiously Recurring Template Pattern 
#include<iostream>
#include<vector>
#pragma optimize("", off)

using namespace std;

struct Shape
{
    virtual Shape* Clone() = 0;
    virtual ~Shape() = default;
};

template< typename T>
struct ShapeCRTP : public Shape  // Curiously Recurring Template Pattern 
{
    virtual Shape* Clone() override
    {
        return new T(*static_cast<T*>(this));
    }
};

struct Square : public ShapeCRTP<Square>
{
    int x = 1;
};

struct Rectangle : public ShapeCRTP<Rectangle>
{
    int x = 1; 
    int y = 2;
};

//if you want to have triangle you are ready to go you dont have to implement clone again
struct Triangle : public ShapeCRTP<Triangle>
{

};

int main()
{
    vector<Shape*> v;
    v.push_back(new Square);
    v.push_back(new Rectangle);
    v.push_back(new Triangle);
    for(auto s : v)
    {
        Shape* c = s->Clone();
        cout << &c << endl;
    }

    return 0;
}


