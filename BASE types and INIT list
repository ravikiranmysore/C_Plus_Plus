// 1. using "const"
#include <iostream>
using namespace std;

class Base
{
  const int _x ;
public:
    Base(int x): _x(x)
    {
        // if _x = x; compiler error
    }
    int getValue()
    {
        return _x;
    }
};

int main()
{
    Base a(12);
    cout << a.getValue()  <<endl;
    return 0;
}
--------------------------------------------
// 2. using "&"

#include <iostream>
using namespace std;

class Base
{
   int &_x ; // & and init list
public:
    Base(int x): _x(x)
    {
        // if _x = x; compiler error
    }
    int getValue()
    {
        return _x;
    }
};

int main()
{
    Base a(12);
    cout << a.getValue()  <<endl;
    return 0;
}

--------------------------------------------
// 2. using c-style structure copying,No default constructor
#include <iostream>
using namespace std;

class Base
{
public:
   int x;
    int getValue()
    {
        return x;
    }
};

int main()
{
   // Base a(12); error
    Base a = {10}; //  c-style structure copying,No default constructor
    cout << a.getValue()  <<endl;
    return 0;
}
-----------------------------------------

#include <iostream>
using namespace std;

class Base
{
    int x;
public:
    int getValue()
    {
        return x;
    }
};

int main()
{
    Base a = {10}; // Error as init list are only allowed when int x is public;NOT PRIVATE
                  // or else you will get BRACE ENCLOSED INITILIZER LIST ERROR
    cout << a.getValue()  <<endl;
    return 0;
}

#include <iostream>
using namespace std;

class Base
{
    int x;
public:
    Base(int x): x(x) {} //we need constructor if int x is private
    int getValue()
    {
        return x;
    }
};

int main()
{
    Base a = {10};// Base a = 10; same as {10},but 10,20 will be error,then int x,int y should be class private
    Base b = a;
    cout << a.getValue()<< "\t" << b.getValue() <<endl;
    return 0;
}

// INIT list 
#include <iostream>
using namespace std;

class One
{
   int _x;
public:
   One(int x) : _x{x} {} //Note:No default constructor.
};

class Two
{
     One a;
public:
   Two(One x) : a{x} {} // not a = x; then its error,i,e if removed initilization a{x}
};

int main()
{
    One one(10);
    Two two(one);
    return 0;
}

// Base(a) init
#include <iostream>
using namespace std;

class Base
{
   int _x;
public:
   Base(int x) : _x{x} {}
};

class Child : public Base
{
     int _y;  
public:
   Child(int x,int y) : Base{x}, _y{y} { // if you do _x = x; _y = y;  } it will be error 
};

int main()
{
    Child c(1,2);
    return 0;
}

//
 class Base 
{
 int x;
 public:
 Base(int x) :x{x} {}
 };
 
int main()
{
    Base b(1);
    return 0;
}

// init for optimization
#include <iostream>
using namespace std;

class Base
{
    int _x;
public:
    Base() { cout << "Base default" << endl; }
    Base(int x) {_x= x; cout << "Base Parameter constructor"<< endl;}
    Base(const Base& obj){ this->_x = obj._x; cout<<"Base copy constructor"<<endl; }
    Base& operator =(const Base& obj) { cout<< "Base assignement operator"<<endl; }
};

class MyClass {
    Base _b;
public:
    MyClass() { cout << "myclass default"<<endl;}
    MyClass(Base b) { _b=b; cout << "myclass parameter"<<endl;}
     //MyClass(Base b) : _b{b} {  cout << "myclass parameter"<<endl;}
};

int main()
{
    Base b(10);
    MyClass mc(b);
    return 0;
}

/*
  MyClass(Base b) { _b=b; cout << "myclass parameter"<<endl;}
Base Parameter constructor
Base copy constructor
Base default
Base assignement operator
myclass parameter
*/


/*
  MyClass(Base b) : _b{b} {  cout << "myclass parameter"<<endl;}
Base Parameter constructor
Base copy constructor
Base copy constructor
myclass parameter
*/


