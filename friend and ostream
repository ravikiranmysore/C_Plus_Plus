#include <iostream>
using namespace std;

class Base {
    int _x;
public:
    Base(int x) :_x(x){}
    
    /* this->pointer
     *  Base(Base *this,int x) : this->_x(x)
     * {
     *   this->_x;
     * }
    */
    
    // Copy constructor(setter) and return(getter)
    Base(const Base& obj)
    {
        _x = obj._x;
    }
    // friend ostream& operator << ( Base *this, ostream& os,const Base obj);
    // ostream& os ---> ref of os i.e cout
    friend ostream& operator << (ostream& os,const Base obj);
};
ostream& operator << (ostream& os,const Base obj)
{
    os << obj._x;
    return os;
}

int main()
{
    Base b1(50); // this rewritten as
                 // Base(&b1,10);
    Base b2 = b1; ;
    cout << b2 << endl;
    operator<<(cout,b2);// this is overloading,sending cout to lhs
    cout << endl;
    // if cout << 10 << endl;--> ambiguity as there is already a method defined in main
    return 0;
}
